SourceFiles -> FunctionList
Empty -> $
FunctionList -> Function FunctionList
              -> Function
              -> Empty
Function -> TypeSpecifier FunctionName ( ParameterList ) { FunctionDefinition }
TypeSpecifier -> void | short | int | long | float | double | signed | unsigned | char | bool | identifier
FunctionName -> identifier
ParameterList -> ParameterDeclaration , ParameterList
              -> ParameterDeclaration
ParameterDeclaration -> TypeSpecifier Declarator
StorageClassSpecifier -> auto | register | static | extern | typedef
TypeQualifier -> const | volatile
Pointer -> *
Ref -> &
DirectDeclarator -> identifier | string
Declarator -> Pointer DirectDeclarator
           -> Ref DirectDeclarator
           -> DirectDeclarator
FunctionDefinition -> DeclarationSpecifierList StatementList
DeclarationSpecifierList -> TypeSpecifier Declarator ;
                         -> TypeSpecifier Declarator ; DeclarationSpecifierList
                         -> Empty
DeclarationList -> Declaration DeclarationList
                 -> Declaration
                 -> Empty
StatementList -> Statement StatementList | Statement | Empty
Statement -> FunctionCallStatement
          -> ExpressionStatement
          -> IfStatement
If -> if
IfStatement -> If ( LogicalExpression ) Statement
             -> If ( LogicalExpression ) Statement else Statement
             -> If ( LogicalExpression ) { StatementList }
             -> If ( LogicalExpression ) { StatementList } else { StatementList }
FunctionCallParameterList -> FunctionCallList
FunctionCallList -> FunctionCallParameter , FunctionCallList
                  -> FunctionCallParameter
FunctionCallParameter -> Declarator
FunctionCallStatement -> FunctionName ( FunctionCallParameterList ) ;
ExpressionStatement -> EmptyStatement | Expression ;
EmptyStatement -> ;
Expression -> ArithmeticExpression | RelationalExpression | LogicalExpression | AssignmentExpression | ArgumentExpression | PrimaryExpression | ConditionalExpression
ArithmeticExpression -> PrimaryExpression + Expression
                      -> PrimaryExpression - Expression
                      -> PrimaryExpression * Expression
                      -> PrimaryExpression / Expression
                      -> PrimaryExpression % Expression
RelationalExpression -> PrimaryExpression < Expression
                      -> PrimaryExpression > Expression
                      -> PrimaryExpression <= Expression
                      -> PrimaryExpression >= Expression
                      -> PrimaryExpression == Expression
                      -> PrimaryExpression != Expression
LogicalExpression -> BitwiseLogicalExpression | BoolLogicalExpression
BitNot -> ~
BitwiseLogicalExpression -> PrimaryExpression & Expression
                           -> PrimaryExpression ^ Expression
                           -> PrimaryExpression << Expression
                           -> PrimaryExpression >> Expression
                           -> BitNot Expression
BoolNot -> !
BoolLogicalExpression -> PrimaryExpression && Expression
                        -> BoolNot Expression
AssignmentExpression -> Variable = Expression
                      -> Variable += Expression
                      -> Variable -= Expression
                      -> Variable *= Expression
                      -> Variable /= Expression
                      -> Variable %= Expression
                      -> Variable <<= Expression
                      -> Variable >>= Expression
                      -> Variable &= Expression
                      -> Variable != Expression
Variable -> identifier
ConditionalExpression -> LogicalExpression ? Expression : ConditionalExpression
ArgumentExpression -> AssignmentExpression , Expression
LeftBracket -> (
PrimaryExpression -> identifier | integer | LeftBracket Expression ) | LeftBracket TypeSpecifier ) Expression

